ex128 is

  node(name String, children Sequence node) is

  breadth_first_traverse(f node -> unit, root node) =>
    breadth_first_traverse(queue Sequence node) unit is
      match queue.asList
        nil =>
        c Cons =>
          f c.head
          breadth_first_traverse (c.tail ++ c.head.children)
    breadth_first_traverse [root]

  # World
  # ├─Europe
  # │ ├─Belarous
  # │ ├─Portugal
  # ├─Asia
  # ├─Oceania
  # NYI type inference: [] should work for (Sequences.empty node)
  five := node "Belarus" (Sequences.empty node)
  six := node "Portugal" (Sequences.empty node)
  two := node "Europe" [five, six]
  three := node "Asia" (Sequences.empty node)
  four := node "Oceania" (Sequences.empty node)
  one := node "World" [two, three, four]

  breadth_first_traverse (node -> say node.name) one
