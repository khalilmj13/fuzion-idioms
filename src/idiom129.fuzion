breadth_first_traverse(g graph, queue Sequence<vertex>, visited Sequence<vertex>) Sequence<vertex> is
match queue.asList
    nil => visited
    c Cons =>
    host := c.head
    if visited âˆƒ (x -> x.id == host.id)
        breadth_first_traverse g c.tail visited
    else
        n := host.neighbors g
        breadth_first_traverse g (c.tail ++ n) (visited ++ [host])

(breadth_first_traverse g [v1] psSet<vertex>.empty) | (vertex) -> say vertex