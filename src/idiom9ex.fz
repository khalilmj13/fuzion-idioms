# a binTreeNode is a value plus left and right sub-trees
#
binTreeNode(T type : has_total_order,
            val T,
            left, right binTree T) ref
is

  # add element to this tree, return resulting tree
  #
  add (v T) binTree T is
    l := if (v < val) (left .add v) else left
    r := if (v > val) (right.add v) else right
    binTreeNode val l r


  # print this tree
  #
  show =>
    left.show
    say val
    right.show


# a binTree is either a binTreeNode or an empty tree represented by nil
#
binTree(T type : has_total_order) : choice (binTreeNode T) nil is

  # add element to this tree, return resulting tree
  #
  add (v T) binTree T is
    match binTree.this
      nil           => binTreeNode v nil nil
      n binTreeNode => n.add v

  # print this tree
  #
  show unit is
    match binTree.this
      nil           =>
      n binTreeNode => n.show

for
  tree binTree String := nil, tree.add x
  x in ["dog", "elephant", "cat", "cat", "cat", "cat", "lion", "ant", "bee", "albatros", "hyena", "horse", "frog"]
else
  tree.show
