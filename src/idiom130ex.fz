ex129 =>
  vertex(id i32): ordered<vertex> is
    neighbors(g graph) Set<vertex> is
        for
          r ref psSet<vertex> := psSet<vertex>, if      (vertex.this = e.a) r.add e.b
                                                  else if (vertex.this = e.b) r.add e.a
                                                  else                        r
          e in g.edges
        else
          r

    redef infix <= (b vertex) => id <= b.id

    redef asString => "v$id"

    redef orderedThis => vertex id  # NYI: may be removed when type 'like this' is supported

  edge(a, b vertex) is

  graph(edges Sequence<edge>) is

  v1 := vertex 1
  v2 := vertex 2
  v3 := vertex 3
  v4 := vertex 4
  v5 := vertex 5
  edges := [ edge v1 v2;
             edge v1 v3;
             edge v2 v4;
             edge v3 v4;
             edge v4 v5
            ]
  g := graph edges

  depth_first_traverse(queue list<vertex>, visited ref psSet<vertex>) list<vertex> is
    match queue
      nil => lists.empty<vertex>
      c Cons =>
        # already visited? => skip adding to result
        if visited.contains c.head
          depth_first_traverse c.tail visited
        else
          neighbors := c.head.neighbors g
          # result is the current element, the neighbors and the rest of the visitation queue
          [c.head].asList ++ depth_first_traverse (neighbors ++ c.tail) (visited.add c.head)

  depth_first_traverse [v1].asList psSet<vertex>.empty | vertex -> say vertex
